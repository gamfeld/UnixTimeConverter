# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UnixTimeConverterDialog
                                 A QGIS plugin
 This basic plugin reformats times stored in unix Timestamp as QGIS-readable datetime
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Evan Feusi
        email                : gamfeld@protonmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# -*- coding: utf-8 -*-
"""
UnixTimeConverterDialog
QGIS plugin dialog logic.
"""

import os
from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QDialog
from qgis.core import QgsProject

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__),
    'unix2qgisdatetime_dialog_base.ui'
))


class UnixTimeConverterDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        super(UnixTimeConverterDialog, self).__init__(parent)
        self.setupUi(self)

        # 1) Populate time‐format choices
        formats = ["Epoch Milliseconds", "GPS Time", "Unix Seconds"]
        self.formatComboBox.addItems(formats)

        # 2) Grab all vector layers in the project
        self.layers = [
            lyr for lyr in QgsProject.instance().mapLayers().values()
            if lyr.type() == lyr.VectorLayer
        ]
        # fill layerComboBox
        self.layerComboBox.addItems([lyr.name() for lyr in self.layers])

        # 3) When the user picks a layer, refill the field list
        self.layerComboBox.currentIndexChanged.connect(self.populate_fields)
        # initialize fields for first layer
        if self.layers:
            self.populate_fields(0)

        # 4) Convert button just closes the dialog with Accepted
        #    so your plugin’s run() can pick up the selections
        self.convertButton.clicked.connect(self.accept)

    def populate_fields(self, idx):
        """Fill fieldComboBox with the attribute names of layer idx."""
        self.fieldComboBox.clear()
        layer = self.layers[idx]
        names = [fld.name() for fld in layer.fields()]
        self.fieldComboBox.addItems(names)

