# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UnixTimeConverter
                                 A QGIS plugin
 This basic plugin reformats times stored in unix Timestamp as QGIS-readable datetime
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-12
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Evan Feusi
        email                : gamfeld@protonmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime
from qgis.core import QgsField, Qgis
from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# plugin-specific imports!
from .resources import *
from .unix2qgisdatetime_dialog import UnixTimeConverterDialog

#<-------------------------------------- plugin_setup --------------------------------------->#
class UnixTimeConverter:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.menu = '&Convert Unix Time'
        self.first_start = True

    def add_action(self, icon_path, text, callback):  # toolbar / menu item instantiation
        action = QAction(QIcon(icon_path), text, self.iface.mainWindow())
        action.triggered.connect(callback)
        self.iface.addToolBarIcon(action)
        self.iface.addPluginToMenu(self.menu, action)
        return action

    def initGui(self):  # set up!
        icon = ':/plugins/unix2qgisdatetime/icon.png'
        self.add_action(icon, 'Format Unix Time', self.run)

    def unload(self):  # remove from GUI!
        for action in self.iface.mainWindow().findChildren(QAction):
            if action.text() == 'Format Unix Time':
                self.iface.removeToolBarIcon(action)
                self.iface.removePluginMenu(self.menu, action)
#<------------------------------------------------------------------------------------------->#
    """Main logic!!"""
    def run(self): 
        if self.first_start:
            self.first_start = False
            self.dlg = UnixTimeConverterDialog()

        # show dialog 
        self.dlg.statusLabel.setText('')
        if not self.dlg.exec_():
            return

        # get bum user input from dialog
        fmt = self.dlg.formatComboBox.currentText()
        layer = self.dlg.layers[self.dlg.layerComboBox.currentIndex()]
        field_name = self.dlg.fieldComboBox.currentText()

        def to_iso(val):
            """Convert to ISO-8601 format! -- ALGO """
            try:
                ts = float(val)
                if fmt == 'Epoch Milliseconds':
                    ts /= 1000.0
                    dt = datetime.datetime.utcfromtimestamp(ts)
                elif fmt == 'GPS Time':
                    gps0 = datetime.datetime(1980, 1, 6)
                    dt = gps0 + datetime.timedelta(seconds=ts)
                else:  # Unix Seconds
                    dt = datetime.datetime.utcfromtimestamp(ts)
                return dt.strftime('%Y-%m-%dT%H:%M:%SZ')
            except (TypeError, ValueError):
                return ''  
            # ((return empty if conversion fails))

        # start edit
        if not layer.isEditable():
            layer.startEditing()

        # Add new field if missing
        # (I've written this to overwrite if otherwise)
        iso_field = f"{field_name}_iso"
        if layer.fields().indexOf(iso_field) == -1:
            layer.addAttribute(QgsField(iso_field, QVariant.String))
            layer.updateFields()
        iso_idx = layer.fields().indexOf(iso_field)

        # Convert timestamps + update  
        for feat in layer.getFeatures():
            raw = feat[field_name]
            iso = to_iso(raw)
            layer.changeAttributeValue(feat.id(), iso_idx, iso)

        # Save changes + notify with annoying push message
        layer.commitChanges()
        self.iface.messageBar().pushMessage(
            'UnixTimeConverter', 'Conversion successful!',
            level=Qgis.Info
        )
        self.dlg.statusLabel.setText('Conversion complete')

""" Bye! :-) """

